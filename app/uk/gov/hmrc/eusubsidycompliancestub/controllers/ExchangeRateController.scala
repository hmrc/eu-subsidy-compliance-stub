/*
 * Copyright 2024 HM Revenue & Customs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package uk.gov.hmrc.eusubsidycompliancestub.controllers

import play.api.Logging
import play.api.libs.json._
import play.api.libs.json.Format.GenericFormat
import play.api.mvc.{Action, AnyContent, ControllerComponents}
import uk.gov.hmrc.eusubsidycompliancestub.models.MonthlyExchangeRate
import uk.gov.hmrc.eusubsidycompliancestub.services.DataGenerator.{genMonthlyExchangeRate, getSampleValue}
import uk.gov.hmrc.play.bootstrap.backend.controller.BackendController

import java.time.LocalDate
import javax.inject.{Inject, Singleton}
import scala.io.Source
import scala.util.{Failure, Success, Try, Using}

@Singleton
class ExchangeRateController @Inject() (cc: ControllerComponents) extends BackendController(cc) with Logging {
  def retrieveExchangeRates(): Action[AnyContent] = Action {
    ratesFromFile match {
      case Success((existingMonths, rates)) =>
        val autogeneratedRates =
          LazyList
            .iterate(LocalDate.now().withDayOfMonth(1))(_.minusMonths(1))
            .take(12)
            .filterNot(existingMonths)
            .map { dateStart =>
              getSampleValue(genMonthlyExchangeRate(dateStart.getYear, dateStart.getMonthValue))
            }
        val allRates = autogeneratedRates.toList ++ rates
        Ok(Json.toJson(allRates))

      case Failure(exception) =>
        logger.error("Failed to retrieve exchange rates", exception)
        InternalServerError(exception.toString)
    }
  }

  private lazy val ratesFromFile: Try[(Set[LocalDate], List[MonthlyExchangeRate])] =
    Try {
      Using.resource(Source.fromResource("test/europa-currencies.json")) { source =>
        val rates = Json.parse(source.getLines().mkString("\n")).as[List[MonthlyExchangeRate]]
        val dateStarts = rates.view.map(_.dateStart).toSet
        dateStarts -> rates
      }
    }
}
